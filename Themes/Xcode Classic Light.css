meta {
    -theme-display-name: "Bright";
    -theme-interface-style: light;
    -theme-vibrancy: vibrant;
    -theme-accent-color: auto;
}


/*
 * Window styles
 */
meta.window {
    border-color: hsla(0, 0%, 0%, 0.15);
}
meta.titlebar {
    border-color: hsla(0, 0%, 0%, 0.25);
}
meta.titlebar.inactive {
}

meta.button {
    background: linear-gradient(hsl(0, 0%, 100%), hsl(0, 0%, 94%));
    border: linear-gradient(hsla(0, 0%, 0%, 0.2), hsla(0, 0%, 0%, 0.3));
    color: black;
}
meta.button.highlighted {
    background: linear-gradient(hsl(0, 0%, 90%), hsl(0, 0%, 86%));
    border: linear-gradient(hsla(0, 0%, 0%, 0.2), hsla(0, 0%, 0%, 0.3));
    color: black;
}
meta.button.selected {
    color: white;
}
meta.button.highlighted.selected {
    color: white;
}
meta.button.disabled {
    
}

meta.textfield {
    background-color: hsb(0, 0%, 0%, 0.35);
    border-color: hsla(0, 0%, 0%, 0.2);
}
meta.textfield.highlighted {
    background-color: white;
    border-color: hsla(0, 0%, 0%, 0.2);
}


/*
 * Document styles
 */
meta.document {
    background-color: white;
}

/* Text */
meta.text {
    color: black;
}
meta.text.invisible {
    color: rgb(221, 36, 0);
}
meta.text.selected {
}
meta.text.lookup {
    color: rgb(221, 36, 0);
}

/* Cursor */
meta.cursor {
    background-color: rgb(255, 255, 230);
}

/* Indentation Guides */
meta.indentguide {
    color: rgba(0, 0, 0, 0.2);
}

/* Gutter */
meta.gutter {
    color: hsl(0, 0%, 60%);
}
meta.gutter.selected {
    color: hsl(0, 0%, 40%);
    background-color: hsl(0, 0%, 92%);
}


/*
 * Syntax styles
 */

keyword {
    color: rgb(0, 70, 170);
}
comment, declaration {
    color: rgb(135, 135, 135);
    font-style: italic;
}
processing {
    color: rgb(80, 80, 80);
}

bracket, operator {
    color: rgb(0, 112, 248);
}
invalid {
    background-color: red;
}
link {
    color: rgb(218, 10%, 80%);
}

/* Values */
value.boolean, value.null {
    color: rgb(0, 122, 183);
}
value.number {
    color: rgb(0, 122, 183);
}
value.entity, value.symbol {
    color: rgb(0, 122, 183);
}

/* Identifiers */
identifier.global, identifier.variable {
    color: rgb(135, 53, 165);
}
identifier.type {
    color: rgb(116, 27, 163);
}
identifier.property, identifier.function, identifier.method {
    color: rgb(63, 110, 125);
}
identifier.key {
    color: rgb(57, 0, 160);
}
identifier.argument {
    color: rgb(57, 0, 160);
}

/* Strings */
cdata {
    color: rgb(187, 37, 0);
}
string, regex {
    color: rgb(221, 36, 0);
}
string.escaped, regex.escaped {
    color: rgb(53, 82, 0);
}
string.key {
    color: rgb(0, 122, 183);
}
string-template {
    color: rgb(255, 85, 51);
}
string-template.value {
    color: rgb(255, 128, 102);
}

/* Markup */
markup.heading {
    color: rgb(0, 70, 170);
}
markup.line {
    color: hsl(60, 43%, 56%);
}
markup.bold {
    color: rgb(93, 143, 0);
    font-weight: bold;
}
markup.italic {
    color: rgb(222, 122, 49);
    font-style: italic;
}
markup.strikethrough {
    color: rgb(221, 36, 0);
}
markup.list.item {
    color: rgb(0, 70, 170);
}
markup.code {
    background-color: rgba(128, 128, 128, 0.2);
}
markup.link {
    color: rgb(0, 122, 183);
}

/* Types */
definition.class class.name,
definition.type type.name,
definition.package package.name,
definition.enum enum.name,
definition.union union.name,
definition.struct struct.name {
    font-weight: bold;
    color: rgb(116, 27, 163);
}

/* Members */
definition.property property.name,
definition.function function.name,
definition.method method.name {
    color: rgb(63, 110, 125);
}

/* Tags */
tag {
    color: rgb(0, 70, 170);
}
tag.framework {
    color: rgb(64, 0, 128);
}
tag.attribute.name {
    color: rgb(0, 122, 183);
}
tag.attribute.value {
    color: rgb(93, 143, 0);
}
tag.attribute.value.link {
    color: rgb(0, 76, 203);
}

/* Styles */
style.at {
    color: rgb(222, 122, 49);
    font-weight: bold;
}
style.selector.element {
    font-weight: bold;
}
style.selector.identifier.id {
    color: rgb(0, 70, 170);
}
style.selector.identifier.class {
    color: rgb(63, 110, 125);
}
style.selector.pseudoclass {
    color: rgb(116, 27, 163);
}
style.selector.pseudoelement {
    color: rgb(63, 110, 125);
}
style.attribute.name {
    color: rgb(0, 70, 170);
}
style.string {
    color: rgb(224, 55, 143);
}
style.value.number {
    color: rgb(221, 36, 0);
}
style.value.color.hex {
    color: rgb(215, 45, 101);
}
style.value.keyword, style.value.color.named {
    color: rgb(93, 143, 0);
}
